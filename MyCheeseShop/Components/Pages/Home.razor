@page "/"
@using MyCheeseShop.Context
@using MyCheeseShop.Model
@using MyCheeseShop.Components
@inject ShoppingCart ShoppingCart

@inject CheeseProvider CheeseProvider
<PageTitle>Home</PageTitle>

<input type="text" class="form-control" placeholder="Search for cheese..." @bind:event="oniput">
@if (cheeses is null)
{
    <p>Loading...</p>
}
else if (!cheeses.Any())
{
    <p>No cheeses found</p>
}

<div class="row">
    @foreach (var cheese in FilteredCheeses)
    {
        <div class="col-md-3">
            <StoreItem Cheese="cheese" />
        </div>
    }
</div>

@if (FilteredCheeses.Any())
{
    <p>No cheeses found</p>
}
@code {
    private string searchTerm = "";
    private IEnumerable<Cheese> cheeses;
    private IEnumerable<Cheese> filteredCheeses;
    private IEnumerable<Cheese> FilteredCheeses
    {
        get
        {
            return filteredCheeses.Where(GetSearchCriteria);
        }
        set
        {
            filteredCheeses = value;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        cheeses = await CheeseProvider.GetAllCheesesAsync();
        filteredCheeses = cheeses;
        ShoppingCart.OnCartUpdated += StateHasChanged;
    }

    private bool GetSearchCriteria(Cheese cheese)
    {
        if (string.IsNullOrWhiteSpace(searchTerm)) return true; 

        return cheese.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
        || cheese.Type.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
        || cheese.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
        || cheese.Strength.Contains(searchTerm, StringComparison.OrdinalIgnoreCase);

    }
}


